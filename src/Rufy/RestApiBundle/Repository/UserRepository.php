<?php namespace Rufy\RestApiBundle\Repository;

use Rufy\RestApiBundle\Entity\Reservation,
    Rufy\RestApiBundle\Entity\User,
    Rufy\RestApiBundle\Entity\Restaurant,
    Rufy\RestApiBundle\Entity\Area;

use Symfony\Component\Security\Core\User\UserInterface,
    Symfony\Component\Security\Core\User\UserProviderInterface,
    Symfony\Component\Security\Core\Exception\UsernameNotFoundException,
    Symfony\Component\Security\Core\Exception\UnsupportedUserException;

use Doctrine\ORM\EntityRepository,
    Doctrine\ORM\NoResultException;
/**
 * UserRepository
 *
 * This class was generated by the Doctrine ORM. Add your own custom
 * repository methods below.
 */
class UserRepository extends EntityRepository implements UserProviderInterface
{
    /**
     * Loads the user for the given username.
     *
     * This method must throw UsernameNotFoundException if the user is not
     * found.
     *
     * @param string $username The username
     *
     * @return UserInterface
     *
     * @see UsernameNotFoundException
     *
     * @throws UsernameNotFoundException if the user has not been found
     */
    public function loadUserByUsername($username)
    {

        /**
         * u = user
         * re = restaurant
         * a = area
         * ao = area options
         * c = customer
         */
        $q = $this
            ->createQueryBuilder('u')
            ->addSelect('u, re, a, ao, c')
            ->leftJoin('u.restaurants', 're')
            ->leftJoin('re.areas', 'a')
            ->leftJoin('a.areaOptions', 'ao')
            ->leftJoin('re.customers', 'c')
            ->where('u.username = :username OR u.email = :email')
            ->setParameter('username', $username)
            ->setParameter('email', $username)
            ->getQuery();

        try {
            // Il metodo Query::getSingleResult() lancia un'eccezione se nessuna riga corrisponde ai criteri
            $user = $q->getSingleResult();

        } catch (NoResultException $e) {

            $message = sprintf(
                'Impossibile trovare un oggetto RufyRestApiBundle:User identificato da  "%s".',
                $username
            );

            throw new UsernameNotFoundException($message, 0, $e);
        }

        return $user;
    }

    /**
     * Refreshes the user for the account interface.
     *
     * It is up to the implementation to decide if the user data should be
     * totally reloaded (e.g. from the database), or if the UserInterface
     * object can just be merged into some internal array of users / identity
     * map.
     *
     * @param UserInterface $user
     *
     * @return UserInterface
     *
     * @throws UnsupportedUserException if the account is not supported
     */
    public function refreshUser(UserInterface $user)
    {
        $class = get_class($user);
        if (!$this->supportsClass($class)) {
            throw new UnsupportedUserException(
                sprintf(
                    'Istanze di "%s" non supportate.',
                    $class
                )
            );
        }

        return $this->find($user->getId());
    }

    /**
     * Whether this provider supports the given user class.
     *
     * @param string $class
     *
     * @return bool
     */
    public function supportsClass($class)
    {
        return $this->getEntityName() === $class || is_subclass_of($class, $this->getEntityName());
    }


    /**
     * TODO
     * Migliorare utilizzando metodo Collection::exists()
     *
     * Controlla se una prenotazione appartiene all'utente che cerca di visualizzarla
     *
     * @param Reservation|array $reservation
     * @param User $user
     * @return bool
     */
    public function hasReservation($reservation, $user)
    {
        $reservation            = is_array($reservation) ? current($reservation) : $reservation;

        // Il ristorante della prenotazione
        $reservationRestaurant  = $reservation->getArea()->getRestaurant();

        // I ristoranti nei quali lavora lo user
        $userRestaurants        = $user->getRestaurants();

        // Ciclo i ristoranti dello user
        foreach ($userRestaurants as $restaurant) {

            /**
             * @var $restaurant Restaurant
             *
             * Se la prenotazione appartiene a un ristorante dello user, la restituisco
             */
            if ($reservationRestaurant->getId() == $restaurant->getId())
                return true;
        }

        return false;
    }

    /**
     * Controlla se un utente ha determinate aree
     *
     * @param Reservation $reservation
     * @param User $user
     *
     * @return bool
     */
    public function hasArea($reservation, $user)
    {
        $reservationArea    = $reservation->getArea();
        $userRestaurants    = $user->getRestaurants();

        foreach ($userRestaurants as $restaurant) {

            /**
             * @var $restaurant Restaurant
             */
            if ($this->getEntityManager()->getRepository('RufyRestApiBundle:Restaurant')->hasArea($restaurant, $reservationArea)) {
                return true;
            }

        }

        return false;
    }
}
